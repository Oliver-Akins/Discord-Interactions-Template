/** The data that is sent to Discord to create a message */
interface SendMessage {
	/** Up to 2000 characters */
	content?: string;

	/** Whether the clients should speak the message. Default: `false` */
	tts?: boolean;

	/** The contents of the file */
	file?: any;

	/** The embedded `rich` content. Up to 6000 characters total. */
	embeds?: MessageEmbed[];

	/** This is ONLY used when transmitting via `multipart/form-data` */
	payload_json?: string;

	allowed_mentions: {};

	message_reference: {};

	components: MessageComponent[];

	sticker_ids: Snowflake[];
}


/** The message object that Discord stores in it's system */
interface Message extends SendMessage {
	id: Snowflake;
	channel_id: Snowflake;
	guild_id?: Snowflake;

	/**
	 * The author object follows the structure of the user object, but is only
	 * a valid user in the case where the message is generated by a user or bot
	 * user. If the message is generated by a webhook, the author object
	 * corresponds to the webhook's id, username, and avatar. You can tell if a
	 * message is generated by a webhook by checking for the webhook_id on the
	 * message object.
	 */
	author: any;

	/**
	 * 
	 */
	member?: any;
}


interface Embed {
	title?: string;
	type: "rich";
	description?: string;
	url?: string;
	timestamp?: string;
	color?: number;
	footer?: EmbedFooter;
	image?: EmbedImage;
	thumbnail?: EmbedThumbnail;
	video?: EmbedVideo;
	provider?: EmbedProvider;
	author?: EmbedAuthor;
	fields?: EmbedField[];
}

interface EmbedFooter {
	text: string;
	icon_url?: string;
	proxy_icon_url?: string;
}

interface EmbedImage {
	url: string;
	proxy_url?: string;
	height?: number;
	width?: number;
}

interface EmbedThumbnail {
	url: string;
	proxy_url?: string;
	height?: number;
	width?: number;
}

interface EmbedVideo {
	url?: string;
	proxy_url?: string;
	height?: number;
	width?: number;
}

interface EmbedProvider {
	name?: string;
	url?: string;
}

interface EmbedAuthor {
	name: string;
	url?: string;
	icon_url?: string;
	proxy_icon_url?: string;
}

interface EmbedField {
	name: string;
	value: string;
	/** Default: `false` */
	inline?: boolean;
}